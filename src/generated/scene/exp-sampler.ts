// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ExpSampler {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ExpSampler {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsExpSampler(bb:flatbuffers.ByteBuffer, obj?:ExpSampler):ExpSampler {
  return (obj || new ExpSampler()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsExpSampler(bb:flatbuffers.ByteBuffer, obj?:ExpSampler):ExpSampler {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ExpSampler()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

texture():string|null
texture(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
texture(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

linearFiltering():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

useMipmaps():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startExpSampler(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTexture(builder:flatbuffers.Builder, textureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, textureOffset, 0);
}

static addLinearFiltering(builder:flatbuffers.Builder, linearFiltering:boolean) {
  builder.addFieldInt8(1, +linearFiltering, +false);
}

static addUseMipmaps(builder:flatbuffers.Builder, useMipmaps:boolean) {
  builder.addFieldInt8(2, +useMipmaps, +false);
}

static endExpSampler(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createExpSampler(builder:flatbuffers.Builder, textureOffset:flatbuffers.Offset, linearFiltering:boolean, useMipmaps:boolean):flatbuffers.Offset {
  ExpSampler.startExpSampler(builder);
  ExpSampler.addTexture(builder, textureOffset);
  ExpSampler.addLinearFiltering(builder, linearFiltering);
  ExpSampler.addUseMipmaps(builder, useMipmaps);
  return ExpSampler.endExpSampler(builder);
}
}
