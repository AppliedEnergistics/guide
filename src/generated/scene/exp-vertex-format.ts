// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ExpVertexFormatElement } from '../scene/exp-vertex-format-element.js';


export class ExpVertexFormat {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ExpVertexFormat {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsExpVertexFormat(bb:flatbuffers.ByteBuffer, obj?:ExpVertexFormat):ExpVertexFormat {
  return (obj || new ExpVertexFormat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsExpVertexFormat(bb:flatbuffers.ByteBuffer, obj?:ExpVertexFormat):ExpVertexFormat {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ExpVertexFormat()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

elements(index: number, obj?:ExpVertexFormatElement):ExpVertexFormatElement|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ExpVertexFormatElement()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 7, this.bb!) : null;
}

elementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

vertexSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startExpVertexFormat(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addElements(builder:flatbuffers.Builder, elementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, elementsOffset, 0);
}

static startElementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(7, numElems, 1);
}

static addVertexSize(builder:flatbuffers.Builder, vertexSize:number) {
  builder.addFieldInt8(1, vertexSize, 0);
}

static endExpVertexFormat(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createExpVertexFormat(builder:flatbuffers.Builder, elementsOffset:flatbuffers.Offset, vertexSize:number):flatbuffers.Offset {
  ExpVertexFormat.startExpVertexFormat(builder);
  ExpVertexFormat.addElements(builder, elementsOffset);
  ExpVertexFormat.addVertexSize(builder, vertexSize);
  return ExpVertexFormat.endExpVertexFormat(builder);
}
}
