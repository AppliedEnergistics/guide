// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ExpIndexElementType } from '../scene/exp-index-element-type.js';
import { ExpMaterial } from '../scene/exp-material.js';
import { ExpPrimitiveType } from '../scene/exp-primitive-type.js';
import { ExpVertexFormat } from '../scene/exp-vertex-format.js';


export class ExpMesh {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ExpMesh {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsExpMesh(bb:flatbuffers.ByteBuffer, obj?:ExpMesh):ExpMesh {
  return (obj || new ExpMesh()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsExpMesh(bb:flatbuffers.ByteBuffer, obj?:ExpMesh):ExpMesh {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ExpMesh()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

material(obj?:ExpMaterial):ExpMaterial|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ExpMaterial()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

vertexFormat(obj?:ExpVertexFormat):ExpVertexFormat|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ExpVertexFormat()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

primitiveType():ExpPrimitiveType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ExpPrimitiveType.LINES;
}

indexBuffer(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

indexBufferLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

indexBufferArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

indexType():ExpIndexElementType {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ExpIndexElementType.UINT;
}

indexCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

vertexBuffer(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

vertexBufferLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

vertexBufferArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startExpMesh(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addMaterial(builder:flatbuffers.Builder, materialOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, materialOffset, 0);
}

static addVertexFormat(builder:flatbuffers.Builder, vertexFormatOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, vertexFormatOffset, 0);
}

static addPrimitiveType(builder:flatbuffers.Builder, primitiveType:ExpPrimitiveType) {
  builder.addFieldInt8(2, primitiveType, ExpPrimitiveType.LINES);
}

static addIndexBuffer(builder:flatbuffers.Builder, indexBufferOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, indexBufferOffset, 0);
}

static createIndexBufferVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startIndexBufferVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addIndexType(builder:flatbuffers.Builder, indexType:ExpIndexElementType) {
  builder.addFieldInt8(4, indexType, ExpIndexElementType.UINT);
}

static addIndexCount(builder:flatbuffers.Builder, indexCount:number) {
  builder.addFieldInt32(5, indexCount, 0);
}

static addVertexBuffer(builder:flatbuffers.Builder, vertexBufferOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, vertexBufferOffset, 0);
}

static createVertexBufferVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startVertexBufferVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endExpMesh(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
