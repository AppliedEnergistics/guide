// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { ExpAnimatedTexturePartFrame } from "../scene/exp-animated-texture-part-frame";

export class ExpAnimatedTexturePart {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ExpAnimatedTexturePart {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsExpAnimatedTexturePart(
    bb: flatbuffers.ByteBuffer,
    obj?: ExpAnimatedTexturePart,
  ): ExpAnimatedTexturePart {
    return (obj || new ExpAnimatedTexturePart()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsExpAnimatedTexturePart(
    bb: flatbuffers.ByteBuffer,
    obj?: ExpAnimatedTexturePart,
  ): ExpAnimatedTexturePart {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ExpAnimatedTexturePart()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  textureId(): string | null;
  textureId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  textureId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  x(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  y(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
  }

  width(): number {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  height(): number {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  framesPath(): string | null;
  framesPath(
    optionalEncoding: flatbuffers.Encoding,
  ): string | Uint8Array | null;
  framesPath(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  frameCount(): number {
    const offset = this.bb!.__offset(this.bb_pos, 16);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  framesPerRow(): number {
    const offset = this.bb!.__offset(this.bb_pos, 18);
    return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
  }

  frames(
    index: number,
    obj?: ExpAnimatedTexturePartFrame,
  ): ExpAnimatedTexturePartFrame | null {
    const offset = this.bb!.__offset(this.bb_pos, 20);
    return offset
      ? (obj || new ExpAnimatedTexturePartFrame()).__init(
          this.bb!.__vector(this.bb_pos + offset) + index * 4,
          this.bb!,
        )
      : null;
  }

  framesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 20);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startExpAnimatedTexturePart(builder: flatbuffers.Builder) {
    builder.startObject(9);
  }

  static addTextureId(
    builder: flatbuffers.Builder,
    textureIdOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(0, textureIdOffset, 0);
  }

  static addX(builder: flatbuffers.Builder, x: number) {
    builder.addFieldInt32(1, x, 0);
  }

  static addY(builder: flatbuffers.Builder, y: number) {
    builder.addFieldInt32(2, y, 0);
  }

  static addWidth(builder: flatbuffers.Builder, width: number) {
    builder.addFieldInt32(3, width, 0);
  }

  static addHeight(builder: flatbuffers.Builder, height: number) {
    builder.addFieldInt32(4, height, 0);
  }

  static addFramesPath(
    builder: flatbuffers.Builder,
    framesPathOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(5, framesPathOffset, 0);
  }

  static addFrameCount(builder: flatbuffers.Builder, frameCount: number) {
    builder.addFieldInt32(6, frameCount, 0);
  }

  static addFramesPerRow(builder: flatbuffers.Builder, framesPerRow: number) {
    builder.addFieldInt32(7, framesPerRow, 0);
  }

  static addFrames(
    builder: flatbuffers.Builder,
    framesOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(8, framesOffset, 0);
  }

  static startFramesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 2);
  }

  static endExpAnimatedTexturePart(
    builder: flatbuffers.Builder,
  ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createExpAnimatedTexturePart(
    builder: flatbuffers.Builder,
    textureIdOffset: flatbuffers.Offset,
    x: number,
    y: number,
    width: number,
    height: number,
    framesPathOffset: flatbuffers.Offset,
    frameCount: number,
    framesPerRow: number,
    framesOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    ExpAnimatedTexturePart.startExpAnimatedTexturePart(builder);
    ExpAnimatedTexturePart.addTextureId(builder, textureIdOffset);
    ExpAnimatedTexturePart.addX(builder, x);
    ExpAnimatedTexturePart.addY(builder, y);
    ExpAnimatedTexturePart.addWidth(builder, width);
    ExpAnimatedTexturePart.addHeight(builder, height);
    ExpAnimatedTexturePart.addFramesPath(builder, framesPathOffset);
    ExpAnimatedTexturePart.addFrameCount(builder, frameCount);
    ExpAnimatedTexturePart.addFramesPerRow(builder, framesPerRow);
    ExpAnimatedTexturePart.addFrames(builder, framesOffset);
    return ExpAnimatedTexturePart.endExpAnimatedTexturePart(builder);
  }
}
