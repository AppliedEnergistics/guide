// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { ExpAnimatedTexturePart } from "../scene/exp-animated-texture-part";
import { ExpCameraSettings } from "../scene/exp-camera-settings";
import { ExpMesh } from "../scene/exp-mesh";

export class ExpScene {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): ExpScene {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsExpScene(
    bb: flatbuffers.ByteBuffer,
    obj?: ExpScene,
  ): ExpScene {
    return (obj || new ExpScene()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsExpScene(
    bb: flatbuffers.ByteBuffer,
    obj?: ExpScene,
  ): ExpScene {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new ExpScene()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  camera(obj?: ExpCameraSettings): ExpCameraSettings | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new ExpCameraSettings()).__init(this.bb_pos + offset, this.bb!)
      : null;
  }

  meshes(index: number, obj?: ExpMesh): ExpMesh | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? (obj || new ExpMesh()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4,
          ),
          this.bb!,
        )
      : null;
  }

  meshesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  animatedTextures(
    index: number,
    obj?: ExpAnimatedTexturePart,
  ): ExpAnimatedTexturePart | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? (obj || new ExpAnimatedTexturePart()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4,
          ),
          this.bb!,
        )
      : null;
  }

  animatedTexturesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startExpScene(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addCamera(
    builder: flatbuffers.Builder,
    cameraOffset: flatbuffers.Offset,
  ) {
    builder.addFieldStruct(0, cameraOffset, 0);
  }

  static addMeshes(
    builder: flatbuffers.Builder,
    meshesOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(1, meshesOffset, 0);
  }

  static createMeshesVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[],
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startMeshesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static addAnimatedTextures(
    builder: flatbuffers.Builder,
    animatedTexturesOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(2, animatedTexturesOffset, 0);
  }

  static createAnimatedTexturesVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[],
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startAnimatedTexturesVector(
    builder: flatbuffers.Builder,
    numElems: number,
  ) {
    builder.startVector(4, numElems, 4);
  }

  static endExpScene(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishExpSceneBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset,
  ) {
    builder.finish(offset);
  }

  static finishSizePrefixedExpSceneBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset,
  ) {
    builder.finish(offset, undefined, true);
  }

  static createExpScene(
    builder: flatbuffers.Builder,
    cameraOffset: flatbuffers.Offset,
    meshesOffset: flatbuffers.Offset,
    animatedTexturesOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    ExpScene.startExpScene(builder);
    ExpScene.addCamera(builder, cameraOffset);
    ExpScene.addMeshes(builder, meshesOffset);
    ExpScene.addAnimatedTextures(builder, animatedTexturesOffset);
    return ExpScene.endExpScene(builder);
  }
}
