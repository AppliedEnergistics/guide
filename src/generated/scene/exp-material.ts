// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ExpDepthTest } from '../scene/exp-depth-test.js';
import { ExpSampler } from '../scene/exp-sampler.js';
import { ExpTransparency } from '../scene/exp-transparency.js';


export class ExpMaterial {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ExpMaterial {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsExpMaterial(bb:flatbuffers.ByteBuffer, obj?:ExpMaterial):ExpMaterial {
  return (obj || new ExpMaterial()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsExpMaterial(bb:flatbuffers.ByteBuffer, obj?:ExpMaterial):ExpMaterial {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ExpMaterial()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

shaderName():string|null
shaderName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
shaderName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

disableCulling():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

transparency():ExpTransparency {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ExpTransparency.DISABLED;
}

depthTest():ExpDepthTest {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ExpDepthTest.DISABLED;
}

samplers(index: number, obj?:ExpSampler):ExpSampler|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ExpSampler()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

samplersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startExpMaterial(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addShaderName(builder:flatbuffers.Builder, shaderNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, shaderNameOffset, 0);
}

static addDisableCulling(builder:flatbuffers.Builder, disableCulling:boolean) {
  builder.addFieldInt8(2, +disableCulling, +false);
}

static addTransparency(builder:flatbuffers.Builder, transparency:ExpTransparency) {
  builder.addFieldInt8(3, transparency, ExpTransparency.DISABLED);
}

static addDepthTest(builder:flatbuffers.Builder, depthTest:ExpDepthTest) {
  builder.addFieldInt8(4, depthTest, ExpDepthTest.DISABLED);
}

static addSamplers(builder:flatbuffers.Builder, samplersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, samplersOffset, 0);
}

static createSamplersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSamplersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endExpMaterial(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createExpMaterial(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, shaderNameOffset:flatbuffers.Offset, disableCulling:boolean, transparency:ExpTransparency, depthTest:ExpDepthTest, samplersOffset:flatbuffers.Offset):flatbuffers.Offset {
  ExpMaterial.startExpMaterial(builder);
  ExpMaterial.addName(builder, nameOffset);
  ExpMaterial.addShaderName(builder, shaderNameOffset);
  ExpMaterial.addDisableCulling(builder, disableCulling);
  ExpMaterial.addTransparency(builder, transparency);
  ExpMaterial.addDepthTest(builder, depthTest);
  ExpMaterial.addSamplers(builder, samplersOffset);
  return ExpMaterial.endExpMaterial(builder);
}
}
